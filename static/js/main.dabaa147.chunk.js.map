{"version":3,"sources":["components/Navbar.js","components/Settings.js","components/Timer.js","components/TimerControls.js","components/Stats.js","components/Word.js","App.js","index.js"],"names":["Navbar","_useState","useState","_useState2","Object","slicedToArray","isFullscreen","setIsFullscreen","toggleFullScreen","doc","window","document","docEl","documentElement","requestFullScreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","cancelFullScreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","call","react_default","a","createElement","className","id","href","onClick","onKeyDown","Settings","state","hangTime","restTime","breakTime","hangsPerSet","totalSets","resetSettings","initSettings","_this","props","setState","objectSpread","changeSettings","e","setting","newValue","parseInt","target","value","defineProperty","formatSeconds","localStorage","getItem","this","JSON","parse","settings","_this2","_this$state","updateSettings","type","min","onChange","data-error","data-success","role","tabIndex","Component","Timer","_ref","currentTime","sec","minutes","Math","floor","seconds","concat","formatTime","TimerControls","isRunning","previous","playPause","skip","color","Stats","stats","totalElapsedTime","currentHang","currentSet","currentTimeType","theWord","App","interval","noSleep","NoSleep","resetTimer","startSet","resetSet","startHang","_this$state2","startRest","startBreak","toggleTimeType","_this$state3","shouldSwitchTimeType","isInitialized","isRest","isHang","isBreak","hangsRemaining","setsRemaining","disable","timerTick","_this$state4","timerIntervalSequence","_this$state5","clearInterval","setInterval","enable","calculateAdjustment","action","_this$state6","hangMultiplier","adjustment","adjustTotalTimeElapsed","_this$state7","_this$state8","previousSets","startState","setItem","stringify","_this$state9","components_Navbar","components_Settings","components_Timer","components_TimerControls","components_Stats","components_Word","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.dabaa147.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useState } from 'react';\r\nimport '../styles/Navbar.css';\r\n\r\nconst Navbar = () => {\r\n  const [isFullscreen, setIsFullscreen] = useState(false);\r\n\r\n  const toggleFullScreen = () => {\r\n    const doc = window.document;\r\n    const docEl = doc.documentElement;\r\n\r\n    const requestFullScreen =\r\n      docEl.requestFullscreen ||\r\n      docEl.mozRequestFullScreen ||\r\n      docEl.webkitRequestFullScreen ||\r\n      docEl.msRequestFullscreen;\r\n    const cancelFullScreen =\r\n      doc.exitFullscreen ||\r\n      doc.mozCancelFullScreen ||\r\n      doc.webkitExitFullscreen ||\r\n      doc.msExitFullscreen;\r\n\r\n    if (\r\n      !doc.fullscreenElement &&\r\n      !doc.mozFullScreenElement &&\r\n      !doc.webkitFullscreenElement &&\r\n      !doc.msFullscreenElement\r\n    ) {\r\n      requestFullScreen.call(docEl);\r\n      setIsFullscreen(true);\r\n    } else {\r\n      cancelFullScreen.call(doc);\r\n      setIsFullscreen(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper blue-grey darken-2\" id=\"navbar\">\r\n        <div className=\"container\">\r\n          <a href=\"/\" className=\"brand-logo blue-grey-text text-darken-4\">\r\n            {'Hangboard'}\r\n          </a>\r\n          <ul className=\"right\">\r\n            <li>\r\n              <a className=\"modal-trigger\" href=\"#settings\">\r\n                <i className=\"material-icons blue-grey-text text-darken-4\">settings</i>\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a\r\n                className=\"modal-trigger\"\r\n                onClick={() => toggleFullScreen()}\r\n                onKeyDown={() => toggleFullScreen()}\r\n              >\r\n                <i className=\"material-icons blue-grey-text text-darken-4\">\r\n                  {isFullscreen ? 'fullscreen_exit' : 'fullscreen'}\r\n                </i>\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\nimport '../styles/Settings.css';\r\n\r\nclass Settings extends Component {\r\n  state = {\r\n    hangTime: 0,\r\n    restTime: 0,\r\n    breakTime: 0,\r\n    hangsPerSet: 0,\r\n    totalSets: 0\r\n  };\r\n\r\n  componentWillMount() {\r\n    if (localStorage.getItem('timer')) {\r\n      this.setState({\r\n        ...JSON.parse(localStorage.getItem('timer')).settings\r\n      });\r\n    } else {\r\n      this.resetSettings();\r\n    }\r\n  }\r\n\r\n  resetSettings = () => {\r\n    const { initSettings } = this.props;\r\n    this.setState({\r\n      ...initSettings\r\n    });\r\n  };\r\n\r\n  changeSettings = (e, setting) => {\r\n    const newValue = parseInt(e.target.value, 10) || 0;\r\n    e.target.value = newValue;\r\n    this.setState({\r\n      [setting]: newValue\r\n    });\r\n  };\r\n\r\n  formatSeconds = e => {\r\n    if (e.target.value) {\r\n      e.target.value *= 1;\r\n    } else {\r\n      e.target.value = 0;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { hangTime, restTime, breakTime, hangsPerSet, totalSets } = this.state;\r\n    const { updateSettings } = this.props;\r\n\r\n    return (\r\n      <div id=\"settings\" className=\"modal grey lighten-4\">\r\n        <div className=\"modal-content\">\r\n          <h4>Settings</h4>\r\n          <div className=\"row\">\r\n            <div className=\"input-field col s4\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"center\"\r\n                min=\"0\"\r\n                value={hangTime}\r\n                onChange={e => this.changeSettings(e, 'hangTime')}\r\n              />\r\n              <span className=\"helper-text center\" data-error=\"wrong\" data-success=\"right\">\r\n                {'Hang Time'}\r\n              </span>\r\n            </div>\r\n            <div className=\"input-field col s4\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"center\"\r\n                min=\"0\"\r\n                value={restTime}\r\n                onChange={e => this.changeSettings(e, 'restTime')}\r\n              />\r\n              <span className=\"helper-text center\" data-error=\"wrong\" data-success=\"right\">\r\n                {'Rest Time'}\r\n              </span>\r\n            </div>\r\n            <div className=\"input-field col s4\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"center\"\r\n                min=\"0\"\r\n                value={breakTime}\r\n                onChange={e => this.changeSettings(e, 'breakTime')}\r\n              />\r\n              <span className=\"helper-text center\" data-error=\"wrong\" data-success=\"right\">\r\n                {'Break Time'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"input-field col s6\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"center\"\r\n                min=\"0\"\r\n                value={hangsPerSet}\r\n                onChange={e => this.changeSettings(e, 'hangsPerSet')}\r\n              />\r\n              <span className=\"helper-text center\" data-error=\"wrong\" data-success=\"right\">\r\n                {'Hangs Per Set'}\r\n              </span>\r\n            </div>\r\n            <div className=\"input-field col s6\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"center\"\r\n                min=\"0\"\r\n                value={totalSets}\r\n                onChange={e => this.changeSettings(e, 'totalSets')}\r\n              />\r\n              <span className=\"helper-text center\" data-error=\"wrong\" data-success=\"right\">\r\n                {'Total Sets'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-footer grey lighten-4\">\r\n          <div\r\n            className=\"modal-close waves-effect waves-green btn-flat\"\r\n            onKeyDown={() => {\r\n              this.resetSettings();\r\n            }}\r\n            onClick={() => {\r\n              this.resetSettings();\r\n            }}\r\n            role=\"button\"\r\n            tabIndex=\"0\"\r\n          >\r\n            {'Cancel'}\r\n          </div>\r\n          <div\r\n            className=\"modal-close waves-effect waves-green btn-flat\"\r\n            onKeyDown={() => {\r\n              updateSettings(this.state);\r\n            }}\r\n            onClick={() => {\r\n              updateSettings(this.state);\r\n            }}\r\n            role=\"button\"\r\n            tabIndex=\"0\"\r\n          >\r\n            {'Save'}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Settings;\r\n","import React from 'react';\r\nimport '../styles/Timer.css';\r\n\r\nconst Timer = ({ currentTime }) => {\r\n  const formatTime = sec => {\r\n    let minutes = Math.floor(sec / 60);\r\n    let seconds = sec - minutes * 60;\r\n\r\n    if (minutes < 10) {\r\n      minutes = `0${minutes}`;\r\n    }\r\n    if (seconds < 10) {\r\n      seconds = `0${seconds}`;\r\n    }\r\n    return `${minutes}:${seconds}`;\r\n  };\r\n\r\n  return (\r\n    <h1 className=\"center blue-grey-text text-darken-2\" id=\"timer\">\r\n      {formatTime(currentTime)}\r\n    </h1>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\n\r\nconst TimerControls = ({ isRunning, previous, playPause, skip }) => {\r\n  const color = isRunning ? 'red accent-1' : 'green accent-1';\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div\r\n          className={`col s3 waves-effect waves-light btn-large btn-flat ${color}`}\r\n          onClick={previous}\r\n          onKeyDown={previous}\r\n          role=\"button\"\r\n          tabIndex=\"0\"\r\n        >\r\n          <i className=\"material-icons\">skip_previous</i>\r\n        </div>\r\n        <div className=\"col s6 row\">\r\n          <div\r\n            className={`col s12 waves-effect waves-light btn-large btn-flat ${color}`}\r\n            onClick={playPause}\r\n            onKeyDown={playPause}\r\n            role=\"button\"\r\n            tabIndex=\"0\"\r\n          >\r\n            <i className=\"material-icons\">{isRunning ? 'pause' : 'play_arrow'}</i>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={`col s3 waves-effect waves-light btn-large btn-flat ${color}`}\r\n          onClick={skip}\r\n          onKeyDown={skip}\r\n          role=\"button\"\r\n          tabIndex=\"0\"\r\n        >\r\n          <i className=\"material-icons\">skip_next</i>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimerControls;\r\n","import React from 'react';\r\nimport '../styles/Stats.css';\r\n\r\nconst Stats = ({ stats }) => {\r\n  const { totalElapsedTime, currentHang, currentSet, settings } = stats;\r\n\r\n  const formatTime = sec => {\r\n    let minutes = Math.floor(sec / 60);\r\n    let seconds = sec - minutes * 60;\r\n\r\n    if (minutes < 10) {\r\n      minutes = `0${minutes}`;\r\n    }\r\n    if (seconds < 10) {\r\n      seconds = `0${seconds}`;\r\n    }\r\n    return `${minutes}:${seconds}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"section container\">\r\n      <div className=\"row\">\r\n        <div className=\"col s4\">\r\n          <p className=\"center-align grey-text\">Time Elapsed</p>\r\n          <h4 className=\"center-align grey-text\">{formatTime(totalElapsedTime)}</h4>\r\n        </div>\r\n        <div className=\"col s4\">\r\n          <p className=\"center-align grey-text\">Hang</p>\r\n          <h4 className=\"center-align grey-text\">{`${currentHang} / ${settings.hangsPerSet}`}</h4>\r\n        </div>\r\n        <div className=\"col s4\">\r\n          <p className=\"center-align grey-text\">Set</p>\r\n          <h4 className=\"center-align grey-text\">{`${currentSet} / ${settings.totalSets}`}</h4>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n","import React from 'react';\r\nimport '../styles/Word.css';\r\n\r\nconst Timer = ({ currentTimeType, currentHang }) => {\r\n  let theWord = '';\r\n\r\n  if (currentTimeType === 'rest' && currentHang === 0) {\r\n    theWord = 'Get Ready';\r\n  } else if (currentTimeType === 'rest' && currentHang > 0) {\r\n    theWord = 'Rest';\r\n  } else if (currentTimeType === 'break') {\r\n    theWord = 'Break';\r\n  } else if (currentTimeType === 'hang') {\r\n    theWord = 'Hang';\r\n  }\r\n\r\n  return (\r\n    <div className=\"section container\">\r\n      <h1 className=\"center blue-grey-text text-darken-2\" id=\"word\">\r\n        {theWord}\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\r\nimport NoSleep from 'nosleep.js';\r\n\r\nimport Navbar from './components/Navbar';\r\nimport Settings from './components/Settings';\r\nimport Timer from './components/Timer';\r\nimport TimerControls from './components/TimerControls';\r\nimport Stats from './components/Stats';\r\nimport Word from './components/Word';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    settings: {\r\n      hangTime: 10,\r\n      restTime: 5,\r\n      breakTime: 30,\r\n      hangsPerSet: 6,\r\n      totalSets: 2\r\n    },\r\n    currentTimeType: null,\r\n    currentTime: 0,\r\n    currentHang: 0,\r\n    currentSet: 0,\r\n    interval: null,\r\n    totalElapsedTime: 0,\r\n    noSleep: new NoSleep()\r\n  };\r\n\r\n  componentWillMount() {\r\n    const startState = { ...this.state };\r\n    delete startState.noSleep;\r\n    startState.interval = null;\r\n\r\n    if (localStorage.getItem('timer')) {\r\n      this.setState({\r\n        ...JSON.parse(localStorage.getItem('timer')),\r\n        noSleep: new NoSleep()\r\n      });\r\n    } else {\r\n      localStorage.setItem('timer', JSON.stringify(startState));\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const startState = { ...this.state };\r\n    // noSleep was causing issues when trying to call enable after being restored from local storage\r\n    delete startState.noSleep;\r\n    startState.interval = null;\r\n    localStorage.setItem('timer', JSON.stringify(startState));\r\n  }\r\n\r\n  resetTimer = () => {\r\n    this.setState({\r\n      currentTimeType: null,\r\n      currentTime: 0,\r\n      currentHang: 0,\r\n      currentSet: 0,\r\n      totalElapsedTime: 0\r\n    });\r\n  };\r\n\r\n  startSet = () => {\r\n    const { currentSet, settings, currentTimeType } = this.state;\r\n\r\n    this.setState({\r\n      currentTimeType: 'rest',\r\n      currentSet: currentSet + 1,\r\n      currentHang: 0,\r\n      currentTime: settings.restTime\r\n    });\r\n\r\n    // Fixes 1 sec ahead issue when starting timer\r\n    if (!currentTimeType) {\r\n      this.setState({\r\n        totalElapsedTime: 0\r\n      });\r\n    }\r\n  };\r\n\r\n  resetSet = () => {\r\n    const { settings } = this.state;\r\n\r\n    this.setState({\r\n      currentTimeType: 'rest',\r\n      currentHang: 0,\r\n      currentTime: settings.restTime\r\n    });\r\n  };\r\n\r\n  startHang = () => {\r\n    const { currentHang, settings } = this.state;\r\n\r\n    this.setState({\r\n      currentTimeType: 'hang',\r\n      currentHang: currentHang + 1,\r\n      currentTime: settings.hangTime\r\n    });\r\n  };\r\n\r\n  startRest = () => {\r\n    const { settings } = this.state;\r\n\r\n    this.setState({\r\n      currentTimeType: 'rest',\r\n      currentTime: settings.restTime\r\n    });\r\n  };\r\n\r\n  startBreak = () => {\r\n    const { settings } = this.state;\r\n\r\n    this.setState({\r\n      currentTimeType: 'break',\r\n      currentHang: 0,\r\n      currentTime: settings.breakTime\r\n    });\r\n  };\r\n\r\n  toggleTimeType = () => {\r\n    const { currentTimeType, currentTime, currentHang, currentSet, settings, noSleep } = this.state;\r\n\r\n    const shouldSwitchTimeType = currentTime === 0 && currentSet <= settings.totalSets;\r\n    const isInitialized = currentTimeType;\r\n\r\n    const isRest = currentTimeType === 'rest';\r\n    const isHang = currentTimeType === 'hang';\r\n    const isBreak = currentTimeType === 'break';\r\n\r\n    const hangsRemaining = currentHang < settings.hangsPerSet;\r\n    const setsRemaining = currentSet < settings.totalSets;\r\n\r\n    if (!isInitialized) {\r\n      this.startSet();\r\n    }\r\n\r\n    if (shouldSwitchTimeType) {\r\n      if (isRest && hangsRemaining) {\r\n        this.startHang();\r\n      } else if (isHang && hangsRemaining) {\r\n        this.startRest();\r\n      } else if (isHang && !hangsRemaining && setsRemaining) {\r\n        this.startBreak();\r\n      } else if (isBreak && setsRemaining) {\r\n        this.startSet();\r\n      } else {\r\n        this.playPause();\r\n        this.resetTimer();\r\n        noSleep.disable();\r\n      }\r\n    }\r\n  };\r\n\r\n  timerTick = () => {\r\n    const { currentTime, totalElapsedTime } = this.state;\r\n\r\n    this.setState({\r\n      currentTime: currentTime - 1,\r\n      totalElapsedTime: totalElapsedTime + 1\r\n    });\r\n  };\r\n\r\n  timerIntervalSequence = () => {\r\n    this.timerTick();\r\n    this.toggleTimeType();\r\n  };\r\n\r\n  playPause = () => {\r\n    const { interval, noSleep } = this.state;\r\n\r\n    if (interval) {\r\n      this.setState({\r\n        interval: clearInterval(interval)\r\n      });\r\n      noSleep.disable();\r\n    } else {\r\n      this.setState({\r\n        interval: setInterval(this.timerIntervalSequence, 1000)\r\n      });\r\n      noSleep.enable();\r\n    }\r\n  };\r\n\r\n  calculateAdjustment = action => {\r\n    const { currentTime, currentTimeType, currentHang, settings } = this.state;\r\n\r\n    const isRest = currentTimeType === 'rest';\r\n    const isHang = currentTimeType === 'hang';\r\n    const hangMultiplier = settings.hangsPerSet - currentHang;\r\n\r\n    let adjustment = 0;\r\n\r\n    switch (action) {\r\n      case 'skip':\r\n        adjustment += currentTime;\r\n        if (isRest) {\r\n          adjustment +=\r\n            hangMultiplier * settings.hangTime + (hangMultiplier - 1) * settings.restTime;\r\n        } else if (isHang) {\r\n          adjustment += hangMultiplier * settings.hangTime + hangMultiplier * settings.restTime;\r\n        }\r\n        break;\r\n      case 'previous':\r\n        if (isRest) {\r\n          adjustment -=\r\n            currentHang * settings.hangTime +\r\n            currentHang * settings.restTime +\r\n            settings.restTime -\r\n            currentTime;\r\n        } else if (isHang) {\r\n          adjustment -=\r\n            (hangMultiplier - 1) * settings.hangTime +\r\n            hangMultiplier * settings.restTime +\r\n            settings.hangTime -\r\n            currentTime;\r\n        } else {\r\n          adjustment -= settings.breakTime - currentTime;\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return adjustment;\r\n  };\r\n\r\n  adjustTotalTimeElapsed = adjustment => {\r\n    const { totalElapsedTime } = this.state;\r\n\r\n    this.setState({\r\n      totalElapsedTime: totalElapsedTime + adjustment\r\n    });\r\n  };\r\n\r\n  skip = () => {\r\n    const { currentTimeType, currentSet, settings, noSleep } = this.state;\r\n\r\n    const isInitialized = currentTimeType;\r\n\r\n    const isRest = currentTimeType === 'rest';\r\n    const isHang = currentTimeType === 'hang';\r\n    const isBreak = currentTimeType === 'break';\r\n\r\n    const setsRemaining = currentSet < settings.totalSets;\r\n\r\n    if (isInitialized) {\r\n      this.adjustTotalTimeElapsed(this.calculateAdjustment('skip'));\r\n      if ((isRest || isHang) && setsRemaining) {\r\n        this.startBreak();\r\n      } else if (isBreak) {\r\n        this.startSet();\r\n      } else if ((isRest || isHang) && !setsRemaining) {\r\n        this.playPause();\r\n        this.resetTimer();\r\n        noSleep.disable();\r\n      }\r\n    }\r\n  };\r\n\r\n  previous = () => {\r\n    const { currentTimeType, currentSet, noSleep } = this.state;\r\n\r\n    const isInitialized = currentTimeType;\r\n\r\n    const isRest = currentTimeType === 'rest';\r\n    const isHang = currentTimeType === 'hang';\r\n    const isBreak = currentTimeType === 'break';\r\n\r\n    const previousSets = currentSet > 1;\r\n\r\n    if (isInitialized) {\r\n      this.adjustTotalTimeElapsed(this.calculateAdjustment('previous'));\r\n      if ((isRest || isHang) && previousSets) {\r\n        this.resetSet();\r\n      } else if (isBreak) {\r\n        this.startBreak();\r\n      } else if ((isRest || isHang) && !previousSets) {\r\n        this.playPause();\r\n        this.resetTimer();\r\n        noSleep.disable();\r\n      }\r\n    }\r\n  };\r\n\r\n  updateSettings = settings => {\r\n    this.setState({\r\n      settings\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { currentTime, interval, currentTimeType, settings, currentHang } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar currentTimeType={currentTimeType} />\r\n        <Settings updateSettings={this.updateSettings} initSettings={settings} />\r\n        <Timer currentTime={currentTime} />\r\n        <TimerControls\r\n          isRunning={interval}\r\n          previous={this.previous}\r\n          playPause={this.playPause}\r\n          skip={this.skip}\r\n        />\r\n        <Stats stats={this.state} />\r\n        <Word currentTimeType={currentTimeType} currentHang={currentHang} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}